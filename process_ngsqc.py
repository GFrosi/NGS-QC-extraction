import pandas as pd
from bs4 import BeautifulSoup
import sys
import argparse


def parse_html(file_html):
    '''Receives a html file
    and returns list of samples
    related to Homo sapiens'''

    soup = BeautifulSoup(file_html, 'html.parser')
    
    HS_ngs_list = []

    for tables in soup.findAll('table'):
        for tb in tables.findAll('tbody'):
            list_td = []
            for td in tb.findAll('td'):
                
                if 'GSM' in td.text and len(list_td) > 0:
                    
                    HS_ngs_list.append(list_td)
                    list_td = list()
                    list_td.append(td.text.strip())
                
                    continue
                
                list_td.append(td.text.strip()) 
            
            HS_ngs_list.append(list_td)

    return HS_ngs_list


def filter_list_HS(file_html):
    '''Receives a file html and returns 
    a list of correct samples (just human samples)'''

    ngs_len_HS_correct = []
    ngs_len_HS_wrong = []

    HS_ngs_list = parse_html(file_html) #creating HS_ngs_list
    
    for lista in HS_ngs_list:
        if len(lista) > 18:
            ngs_len_HS_wrong.append(lista)
            continue
            
        ngs_len_HS_correct.append(lista) 

    return ngs_len_HS_correct   


def create_df(file_html):
    '''Receives a list of Homo sapiens samples
    and returns a dataframe filtered by ChIP-Seq
    and removed encode samples'''

    ngs_len_HS_correct = filter_list_HS(file_html) #creating ngs_len_HS_correct

    HS_ngs_df = pd.DataFrame(ngs_len_HS_correct, columns=['Public ID', 'Study ID', 'PMID', 'Organism', 'Data type', 'Target molecule', 'TMRs', 
          'QC Stamps', 'QC Reports', 'Local QC Indicators', '2.5 pcdenQC', '2.5 pcQCsim', 
          '5 pcdenQC', '5 pcQCsim', '10 pcdenQC', '10 pcQCsim', 'Seq Plataform', 'Submission Date'])
    
    HS_ngs_df_chipseq = HS_ngs_df[(HS_ngs_df['Data type'].str.contains('ChIP-seq', case = False)) & (~HS_ngs_df['Public ID'].str.contains('encode', case = False))]
    HS_ngs_df_chipseq_no_dup = HS_ngs_df_chipseq.drop_duplicates(subset='Public ID', keep='first')

    return HS_ngs_df_chipseq_no_dup


def rename_col(df_ngs):
    '''Receives a df_ngs and returns a copy
    of this df with renamed cols to merge step'''

    df_ngs1 = df_ngs.copy()
    df_ngs1.rename(columns={'Public ID': 'GSM', 'Target molecule': 'Target-NGS-QC'}, inplace=True)

    return df_ngs1

def merge_geo_ngs(df_geo,df_ngs1):
    '''Receives two dfs and return
    a merged df by GSM col including
    Target-NGS-QC'''

    merged_df = df_geo.merge(df_ngs1[['GSM','Target-NGS-QC']], how='left', on='GSM')

    return merged_df


def reorganize_cols(merged_df):
    '''Receives a merged_df and 
    returns a df with reorganized
    columns'''

    col = ['Release-Date', 'Organism', 'Library_strategy', 'GPL', 'GPL_title',
       'GSE', 'GSE_title', 'GSM', 'GSM_title', 'chip_antib_catalog', 'Target',
       'Cell_line', 'Cell_type', 'Source_cell',
       'Target-interest', 'CL-target', 'Target-GEO', 'Target-NGS-QC', 'Address', 'SRX', 'SRR',
       'SRR_Count']

    df_to_save = merged_df[col]

    return df_to_save

    
def main():

    #block 1
    file_html = open(args.html)
    HS_ngs_df_chipseq_no_dup = create_df(file_html)
    print(len(HS_ngs_df_chipseq_no_dup))
    HS_ngs_df_chipseq_no_dup.to_csv("NGS_HS_ChipSeq_nodup_"+ str(len(HS_ngs_df_chipseq_no_dup))+ ".csv", index=False)

    #block 2
    # df_geo = pd.read_csv(args.dfgeo)
    #df_ngs = pd.read_csv(args.dfngs)
    # df_ngs1 = rename_col(HS_ngs_df_chipseq_no_dup)
    # merged_df = merge_geo_ngs(df_geo,df_ngs1)
    # df_to_save = reorganize_cols(merged_df) #to save
    # df_to_save.to_csv(args.out)
    


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description = 'A tool to manipulate the NGS-QC html results from a web scraper of NGS-QC result(s) page(s) and concatenate the results with GEO metadata table'
    )
    
    parser.add_argument('-i', '--html', action='store',
                        help='The absolut path to the html file containing all NGS-QC information generated by NGS-QC webscrape script',
                        required=True)
    
    parser.add_argument('-g', '--dfgeo', action='store',
                        help='The absolut path to the geo dataframe generated by GEO-METADATA script after standardization (Target-GEO column)',
                        required=False)


    parser.add_argument('-o', '--out', action='store',
                        help='The absolut path save the dataframe containing the NGS-QC target',
                        required=False)


    args = parser.parse_args()


    main()
